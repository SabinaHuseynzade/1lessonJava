// ### Тесты по Java: Введение и Основы

// #### Вопросы общего характера:

// 1. **В чем основное преимущество языка программирования Java?**
//    - a) Простота синтаксиса
//    - b) Низкий уровень абстракции
//    - c) Независимость от платформы
//    - d) Оптимизированность для высокопроизводительных вычислений

// c)

// 2. **Что означает принцип "Write once, run anywhere" в контексте Java?**
//    - a) Программы могут быть написаны только на Java
//    - b) Программы могут быть выполнены на любой платформе без изменений
//    - c) Программы должны быть скомпилированы для каждой платформы отдельно
//    - d) Программы могут быть выполнены только на той платформе, на которой были написаны

// b)

// 3. **Когда был создан язык программирования Java?**
//    - a) 1985
//    - b) 1995
//    - c) 2005
//    - d) 2015

// b)

// 4. **Что представляет собой "байт-код" в Java?**
//    - a) Исходный код программы
//    - b) Скомпилированный код для конкретной платформы
//    - c) Промежуточный код, который выполняется виртуальной машиной Java
//    - d) Код, предназначенный только для мобильных устройств

// c)

// #### Вопросы о программировании на Java:

// 5. **Какие шаги необходимы для установки Java Development Kit (JDK)?**
//    - a) Скачать Eclipse
//    - b) Установить Java Runtime Environment (JRE)
//    - c) Запустить команду `java install`
//    - d) Скачать и установить JDK с официального сайта Oracle

// d)

// 6. **Как создать программу "Hello World" на Java?**
//    - a) Написать текст программы, сохранить в файле и запустить через команду `run`
//    - b) Воспользоваться магической командой `helloWorld.create()`
//    - c) Открыть Eclipse, создать новый проект и ввести код
//    - d) Использовать консоль для написания и выполнения кода по шагам

// c)

// 7. **Что выполняет команда `javac` в Java?**
//    - a) Запускает программу
//    - b) Компилирует Java-код в байт-код
//    - c) Устанавливает JDK
//    - d) Очищает мусор в памяти

// b)

// 8. **Как можно выполнить Java-программу после ее компиляции?**
//    - a) Нажать кнопку "Run" в среде разработки
//    - b) Ввести команду `execute HelloWorld`
//    - c) Запустить исполняемый файл, созданный компилятором
//    - d) Ввести команду `java HelloWorld`

// d)

// #### Вопросы о консольном выводе и комментариях:

// 9. **Как вывести информацию в консоль на Java с новой строки?**
//    - a) `System.print("Hello");`
//    - b) `Console.log("Hello");`
//    - c) `System.out.println("Hello");`
//    - d) `Console.write("Hello");`

// c)

// 10. **Что представляет собой сборщик мусора (Garbage Collection) в Java?**
//     - a) Машина для утилизации отходов
//     - b) Процесс автоматической очистки неиспользуемых объектов из памяти
//     - c) Ответственный за вывод информации в консоль
//     - d) Метод для удаления комментариев из кода

// b)

// #### Вопросы о методе main и командной строке:

// 11. **Зачем используется метод `main` в Java?**
//     - a) Для вывода результатов работы программы
//     - b) Для определения основного функционала программы
//     - c) Для создания пользовательского интерфейса
//     - d) Для обработки исключений

// a)

// 12. **Как передать аргументы командной строки в программу Java через метод `main`?**
//     - a) Поместить аргументы в массив `args` и передать его в метод `main`
//     - b) Использовать команду `java -args MyProgram`
//     - c) Задать аргументы в файле конфигурации
//     - d) Ввести аргументы после команды `java MyProgram`

// a)

// #### Вопросы о JDK, JRE и JVM:

// 13. **Что представляет собой JDK в Java?**
//     - a) Ядро Java
//     - b) Среда выполнения Java
//     - c) Набор инструментов для разработки Java-программ
//     - d) Виртуальная машина для выполнения Java-кода

// c)

// 14. **Какую функцию выполняет JRE в Java?**
//     - a) Предоставляет инструменты разработки
//     - b) Выполняет Java-программы
//     - c) Компилирует Java-код в байт-код
//     - d) Управляет сборкой мусора

// b)

// 15. **Что такое JVM в контексте Java?**
//     - a) Виртуальная машина Java для выполнения скомпилированного кода
//     - b) Среда разработки Java
//     - c) Набор инструментов для создания Java-программ
//     - d) Модуль для управления языком Java

//a)

// ####

//  Вопросы о платформах Java и Classpath:

// 16. **В чем различие между Java SE, Java EE и Java ME?**
//     - a) Java SE - для корпоративных приложений, Java EE - для стандартных приложений, Java ME - для мобильных устройств
//     - b) Java SE - для мобильных устройств, Java EE - для корпоративных приложений, Java ME - для стандартных приложений
//     - c) Все три платформы ориентированы на разные типы приложений
//     - d) Java SE, Java EE и Java ME идентичны, различий нет

// c)

// 17. **Что такое Classpath в Java?**
//     - a) Место, где хранятся исходные коды Java
//     - b) Путь для поиска классов и ресурсов во время выполнения программы
//     - c) Среда разработки Java
//     - d) Название стандартной библиотеки Java

// b)

// #### Вопросы о вводе информации в программу:

// 18. **Как в Java использовать класс Scanner для ввода информации от пользователя?**
//     - a) `readInput = Scanner.getUserInput();`
//     - b) `String input = System.console().readLine();`
//     - c) `Scanner scanner = new Scanner(System.in); String input = scanner.next();`
//     - d) `input = readConsole();`

// c)

// 19. **Как в Java использовать JOptionPane для ввода информации в программу?**
//     - a) `input = JOptionPane.getInput("Enter something:");`
//     - b) `String input = readJOptionPane();`
//     - c) `String input = JOptionPane.showInputDialog("Enter something:");`
//     - d) `input = JOptionPane.getUserInput();`

// c)